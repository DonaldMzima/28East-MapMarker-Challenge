{
  "mappings": "ICqCI,EACJ,IAAI,EAAc,EAClB,MAAM,EAAgB,SAAS,cAAc,CAC3C,kBAQF,eAAe,IACb,GAAI,KCL+B,CDMjC,QCNiC,EC5C9B,0CD6CE,IAAI,QAAQ,CAAC,EAAS,KAC3B,IAAM,EAAS,SAAS,aAAa,CAAC,SACtC,CAAA,EAAO,GAAG,CAAG,CAAC,4CAA4C,EAAE,EAAO,iBAAiB,CAAC,CACrF,EAAO,KAAK,CAAG,CAAA,EACf,EAAO,KAAK,CAAG,CAAA,EACf,EAAO,MAAM,CAAG,IAAM,IACtB,EAAO,OAAO,CAAG,IACf,EAAO,AAAI,MAAM,sCACnB,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,IDHE,EAAM,AAAA,WCOR,IAAM,EAAa,SAAS,cAAc,CAAC,OAC3C,OAAO,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,EAAY,CACrC,OAAQ,CAAE,IAAK,EAAG,IAAK,CAAE,EACzB,KAAM,CACR,EACF,IDVI,IAAM,EAAc,SAAS,cAAc,CACzC,gBAEF,EAAY,gBAAgB,CAAC,WAAY,AAAC,IACxC,GAAI,AAAU,UAAV,EAAE,GAAG,CACP,KCQN,EACA,EACA,EAFA,EDRqB,ECSrB,EDT0B,EAAY,KAAK,CCU3C,EDV6C,ECa7C,AADiB,IAAI,OAAO,IAAI,CAAC,QAAQ,GAChC,OAAO,CAAC,CAAE,QAAS,CAAM,EAAG,CAAC,EAAS,KAC7C,GAAI,AAAW,OAAX,GAAmB,GAAW,CAAO,CAAC,EAAE,CAAE,CAC5C,IAAM,EAAW,CAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAC7C,EAAI,SAAS,CAAC,GACd,EAAI,OAAO,CAAC,IACZ,EAAS,EACX,MACE,MAAM,qBAEV,EDvBI,CAGF,GAEA,EAAI,WAAW,CAAC,QAAS,AAAC,IACpB,EAAE,MAAM,EACV,EAAwB,EAAE,MAAM,CAEpC,EACF,CAAE,MAAO,EAAO,CACd,QAAQ,KAAK,CAAC,4BAA6B,EAC7C,CACF,CAEA,SAAS,EAAwB,CAA4B,MCWnC,EAAA,EDVd,ECWV,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,CAAE,SDXV,ECWoB,IAAA,CAAI,GDxCvC,IACA,EAAc,WAAW,CAAG,CAAC,SAAS,EAAE,EAAY,CAAC,AA8BvD,CAEA,SAAS,gBAAgB,CAAC,mBAAoB",
  "sources": [
    "<anon>",
    "src/app.ts",
    "src/mapService.ts",
    "src/config.ts"
  ],
  "sourcesContent": [
    "// import {\n//   initMap,\n//   searchLocation,\n//   addMarkers,\n//   loadGoogleMapsScript,\n// } from './mapService'\n// import { GOOGLE_MAPS_API_KEY } from './config'\n// let map: google.maps.Map\n// async function initializeApp() {\n//   try {\n//     await loadGoogleMapsScript(GOOGLE_MAPS_API_KEY)\n//     map = initMap()\n//     const searchInput = document.getElementById(\n//       'search-input',\n//     ) as HTMLInputElement\n//     searchInput.addEventListener('keypress', (e) => {\n//       if (e.key === 'Enter') {\n//         searchLocation(map, searchInput.value)\n//       }\n//     })\n//   } catch (error) {\n//     console.error('Failed to initialize app:', error)\n//   }\n// }\n// document.addEventListener('DOMContentLoaded', initializeApp)\n// export function loadGoogleMapsScript(apiKey: string): Promise<void> {\n//   return new Promise((resolve, reject) => {\n//     const script = document.createElement('script')\n//     script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`\n//     script.async = true\n//     script.defer = true\n//     script.onload = () => resolve()\n//     script.onerror = () =>\n//       reject(new Error('Failed to load Google Maps script'))\n//     document.head.appendChild(script)\n//   })\n// }\n// export function initMap(): google.maps.Map {\n//   const mapElement = document.getElementById('map') as HTMLElement\n//   return new google.maps.Map(mapElement, {\n//     center: { lat: 0, lng: 0 },\n//     zoom: 2,\n//   })\n// }\n// export function searchLocation(map: google.maps.Map, query: string) {\n//   const geocoder = new google.maps.Geocoder()\n//   geocoder.geocode({ address: query }, (results, status) => {\n//     if (status === 'OK' && results && results[0]) {\n//       map.setCenter(results[0].geometry.location)\n//       map.setZoom(10)\n//       addMarkers(map, results[0].geometry.location)\n//     } else {\n//       alert('Location not found')\n//     }\n//   })\n// }\n// export function addMarkers(map: google.maps.Map, center: google.maps.LatLng) {\n//   for (let i = 0; i < 1000; i++) {\n//     const position = new google.maps.LatLng(\n//       center.lat() + (Math.random() - 0.5) * 0.1,\n//       center.lng() + (Math.random() - 0.5) * 0.1,\n//     )\n//     new google.maps.Marker({ position, map })\n//   }\n// }\nfunction $d255412f8abe105e$export$12b1c3e901db2782(apiKey) {\n    return new Promise((resolve, reject)=>{\n        const script = document.createElement(\"script\");\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.onload = ()=>resolve();\n        script.onerror = ()=>reject(new Error(\"Failed to load Google Maps script\"));\n        document.head.appendChild(script);\n    });\n}\nfunction $d255412f8abe105e$export$b08464e47b7a3a8() {\n    const mapElement = document.getElementById(\"map\");\n    return new google.maps.Map(mapElement, {\n        center: {\n            lat: 0,\n            lng: 0\n        },\n        zoom: 2\n    });\n}\nfunction $d255412f8abe105e$export$ce3a8ce471b7d4ad(map, query, callback) {\n    const geocoder = new google.maps.Geocoder();\n    geocoder.geocode({\n        address: query\n    }, (results, status)=>{\n        if (status === \"OK\" && results && results[0]) {\n            const location = results[0].geometry.location;\n            map.setCenter(location);\n            map.setZoom(10);\n            callback(location);\n        } else alert(\"Location not found\");\n    });\n}\nfunction $d255412f8abe105e$export$a1e0f4ce78664343(map, position) {\n    new google.maps.Marker({\n        position: position,\n        map: map\n    });\n}\n\n\nconst $9d936a2aecb96285$export$d4214b4977c811ed = \";\n\n\nlet $f43313d21d3fd8e2$var$map;\nlet $f43313d21d3fd8e2$var$markerCount = 0;\nconst $f43313d21d3fd8e2$var$markerCounter = document.getElementById(\"marker-counter\");\nfunction $f43313d21d3fd8e2$var$updateMarkerCount() {\n    $f43313d21d3fd8e2$var$markerCount++;\n    $f43313d21d3fd8e2$var$markerCounter.textContent = `Markers: ${$f43313d21d3fd8e2$var$markerCount}`;\n}\nasync function $f43313d21d3fd8e2$var$initializeApp() {\n    try {\n        await (0, $d255412f8abe105e$export$12b1c3e901db2782)((0, $9d936a2aecb96285$export$d4214b4977c811ed));\n        $f43313d21d3fd8e2$var$map = (0, $d255412f8abe105e$export$b08464e47b7a3a8)();\n        const searchInput = document.getElementById(\"search-input\");\n        searchInput.addEventListener(\"keypress\", (e)=>{\n            if (e.key === \"Enter\") (0, $d255412f8abe105e$export$ce3a8ce471b7d4ad)($f43313d21d3fd8e2$var$map, searchInput.value, $f43313d21d3fd8e2$var$addMarkerAndUpdateCount);\n        });\n        $f43313d21d3fd8e2$var$map.addListener(\"click\", (e)=>{\n            if (e.latLng) $f43313d21d3fd8e2$var$addMarkerAndUpdateCount(e.latLng);\n        });\n    } catch (error) {\n        console.error(\"Failed to initialize app:\", error);\n    }\n}\nfunction $f43313d21d3fd8e2$var$addMarkerAndUpdateCount(position) {\n    (0, $d255412f8abe105e$export$a1e0f4ce78664343)($f43313d21d3fd8e2$var$map, position);\n    $f43313d21d3fd8e2$var$updateMarkerCount();\n}\ndocument.addEventListener(\"DOMContentLoaded\", $f43313d21d3fd8e2$var$initializeApp);\n\n\n//# sourceMappingURL=index.79cb8021.js.map\n",
    "// import {\n//   initMap,\n//   searchLocation,\n//   addMarkers,\n//   loadGoogleMapsScript,\n// } from './mapService'\n// import { GOOGLE_MAPS_API_KEY } from './config'\n\n// let map: google.maps.Map\n\n// async function initializeApp() {\n//   try {\n//     await loadGoogleMapsScript(GOOGLE_MAPS_API_KEY)\n//     map = initMap()\n\n//     const searchInput = document.getElementById(\n//       'search-input',\n//     ) as HTMLInputElement\n//     searchInput.addEventListener('keypress', (e) => {\n//       if (e.key === 'Enter') {\n//         searchLocation(map, searchInput.value)\n//       }\n//     })\n//   } catch (error) {\n//     console.error('Failed to initialize app:', error)\n//   }\n// }\n\n// document.addEventListener('DOMContentLoaded', initializeApp)\nimport {\n  initMap,\n  searchLocation,\n  addMarker,\n  loadGoogleMapsScript,\n} from './mapService'\nimport { GOOGLE_MAPS_API_KEY } from './config'\n\nlet map: google.maps.Map\nlet markerCount = 0\nconst markerCounter = document.getElementById(\n  'marker-counter',\n) as HTMLSpanElement\n\nfunction updateMarkerCount() {\n  markerCount++\n  markerCounter.textContent = `Markers: ${markerCount}`\n}\n\nasync function initializeApp() {\n  try {\n    await loadGoogleMapsScript(GOOGLE_MAPS_API_KEY)\n    map = initMap()\n\n    const searchInput = document.getElementById(\n      'search-input',\n    ) as HTMLInputElement\n    searchInput.addEventListener('keypress', (e) => {\n      if (e.key === 'Enter') {\n        searchLocation(map, searchInput.value, addMarkerAndUpdateCount)\n      }\n    })\n\n    map.addListener('click', (e: google.maps.MapMouseEvent) => {\n      if (e.latLng) {\n        addMarkerAndUpdateCount(e.latLng)\n      }\n    })\n  } catch (error) {\n    console.error('Failed to initialize app:', error)\n  }\n}\n\nfunction addMarkerAndUpdateCount(position: google.maps.LatLng) {\n  addMarker(map, position)\n  updateMarkerCount()\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeApp)\n",
    "// export function loadGoogleMapsScript(apiKey: string): Promise<void> {\n//   return new Promise((resolve, reject) => {\n//     const script = document.createElement('script')\n//     script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`\n//     script.async = true\n//     script.defer = true\n//     script.onload = () => resolve()\n//     script.onerror = () =>\n//       reject(new Error('Failed to load Google Maps script'))\n//     document.head.appendChild(script)\n//   })\n// }\n\n// export function initMap(): google.maps.Map {\n//   const mapElement = document.getElementById('map') as HTMLElement\n//   return new google.maps.Map(mapElement, {\n//     center: { lat: 0, lng: 0 },\n//     zoom: 2,\n//   })\n// }\n\n// export function searchLocation(map: google.maps.Map, query: string) {\n//   const geocoder = new google.maps.Geocoder()\n//   geocoder.geocode({ address: query }, (results, status) => {\n//     if (status === 'OK' && results && results[0]) {\n//       map.setCenter(results[0].geometry.location)\n//       map.setZoom(10)\n//       addMarkers(map, results[0].geometry.location)\n//     } else {\n//       alert('Location not found')\n//     }\n//   })\n// }\n\n// export function addMarkers(map: google.maps.Map, center: google.maps.LatLng) {\n//   for (let i = 0; i < 1000; i++) {\n//     const position = new google.maps.LatLng(\n//       center.lat() + (Math.random() - 0.5) * 0.1,\n//       center.lng() + (Math.random() - 0.5) * 0.1,\n//     )\n//     new google.maps.Marker({ position, map })\n//   }\n// }\n\nexport function loadGoogleMapsScript(apiKey: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script')\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places`\n    script.async = true\n    script.defer = true\n    script.onload = () => resolve()\n    script.onerror = () =>\n      reject(new Error('Failed to load Google Maps script'))\n    document.head.appendChild(script)\n  })\n}\n\nexport function initMap(): google.maps.Map {\n  const mapElement = document.getElementById('map') as HTMLElement\n  return new google.maps.Map(mapElement, {\n    center: { lat: 0, lng: 0 },\n    zoom: 2,\n  })\n}\n\nexport function searchLocation(\n  map: google.maps.Map,\n  query: string,\n  callback: (position: google.maps.LatLng) => void,\n) {\n  const geocoder = new google.maps.Geocoder()\n  geocoder.geocode({ address: query }, (results, status) => {\n    if (status === 'OK' && results && results[0]) {\n      const location = results[0].geometry.location\n      map.setCenter(location)\n      map.setZoom(10)\n      callback(location)\n    } else {\n      alert('Location not found')\n    }\n  })\n}\n\nexport function addMarker(map: google.maps.Map, position: google.maps.LatLng) {\n  new google.maps.Marker({ position, map })\n}\n",
    "export const GOOGLE_MAPS_API_KEY = process.env.GOOGLE_MAPS_API_KEY || ''\n"
  ],
  "names": [
    "$f43313d21d3fd8e2$var$map",
    "$f43313d21d3fd8e2$var$markerCount",
    "$f43313d21d3fd8e2$var$markerCounter",
    "document",
    "getElementById",
    "$f43313d21d3fd8e2$var$initializeApp",
    "apiKey",
    "Promise",
    "resolve",
    "reject",
    "script",
    "createElement",
    "src",
    "async",
    "defer",
    "onload",
    "onerror",
    "Error",
    "head",
    "appendChild",
    "mapElement",
    "google",
    "maps",
    "Map",
    "center",
    "lat",
    "lng",
    "zoom",
    "searchInput",
    "addEventListener",
    "e",
    "key",
    "map",
    "query",
    "callback",
    "value",
    "$f43313d21d3fd8e2$var$addMarkerAndUpdateCount",
    "geocoder",
    "Geocoder",
    "geocode",
    "address",
    "results",
    "status",
    "location",
    "geometry",
    "setCenter",
    "setZoom",
    "alert",
    "addListener",
    "latLng",
    "error",
    "console",
    "position",
    "Marker",
    "textContent"
  ],
  "version": 3,
  "file": "index.79cb8021.js.map"
}
